#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include <cctype>

class Person {
    std::string name;
    int age;
public:
    Person() = default;
    Person(std::string name, int age)
        :name{ name }, age{ age } {}
    bool operator<(const Person& rhs) const { //user-defined types either need overloaded less than operator
        return this->age < rhs.age;
    }
    bool operator==(const Person& rhs) const { //overloaded equality operator
        return (this->name == rhs.name && this->age == rhs.age);
    }
};

void find_test() {
    std::cout << "\n===========Find Algorithm============" << std::endl;
    std::vector<int> vec{ 1,2,3,4,5 };
    auto loc = std::find(std::begin(vec), std::end(vec), 1); //will find the first occurance of the element (1) in the vector container
    if (loc != std::end(vec))
        std::cout << "Found the number " << *loc << "." << std::endl;
    else
        std::cout << "Couldn't find the number." << std::endl;
        
 std::list<Person> players{
        {"Jenny", 21},
        {"Elizabeth", 33},
        {"Gabriel",19}
    };
    auto loc1 = std::find(players.begin(), players.end(), Person{ "Jenny",21 });
    if (loc1 != players.end())
        std::cout << "Found Jenny" << std::endl;
    else
        std::cout << "Jenny not found" << std::endl;         
}

void count_test() {
    std::cout << "\n============Count Test===============" << std::endl;
    std::vector<int> vec{ 1,2,3,4,5,2,1,1,1 };
    //count the number of occurences of an element in a container
    //based on a predicate using a lambda expression
    int pred1{ 2 };
    int num = std::count(vec.begin(), vec.end(), pred1);
    std::cout << num << " occurences found." << std::endl;
    int num1 = std::count(vec.begin(), vec.end(), 1);
    std::cout << num1 << " occurences found." << std::endl;
}

void count_if_test() {
    std::cout << "\n==============Count if Test==========" << std::endl;
    //count only if the element is even
    std::vector<int> vec{ 1,2,3,4,5,1,2,1,100 };
    int num = std::count_if(vec.begin(), vec.end(), [](int x) {return x % 2 == 0; });
    std::cout << num << " even numbers found." << std::endl;
    //count only if the element is odd
    num = std::count_if(vec.begin(), vec.end(), [](int x) {return x % 2 != 0; });
    std::cout << num << " odd numbers found." << std::endl;
    //count only if the element is greater than 5
    num = std::count_if(vec.begin(), vec.end(), [](int x) {return x = 5; });
    std::cout << "There are " << num << " elements greater than 5 found." << std::endl;
}

int main()
{
    find_test();
    count_test(); 
    count_if_test();
    return 0;
}
